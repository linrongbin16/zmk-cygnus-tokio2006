/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define SCROLLER 1
#define MOUSE 4

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

/ {
    macros {
        dongle_bootload_macro: bootload_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
            label = "BOOTLOAD_MACRO";
        };

        mo_macro: mo_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;

            label = "MO_MACRO";
        };

        tap2_macro: tap2_macro {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;

            label = "TAP2_MACRO";
        };
    };

    combos {
        compatible = "zmk,combos";

        bootloader {
            bindings = <&dongle_bootload_macro>;
            key-positions = <38 43>;
            require-prior-idle-ms = <125>;
            timeout-ms = <50>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <21 22 23 24 20 25 11 10 9 8 7 6 32 33 35 34 36 37 41 42 43 38 39 40>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <15 16 17 18 0 1 2 3 4 5 19 31 30 29 28 27 26 14 40 39 38 41 42 43>;
            hold-trigger-on-release;
        };

        hmlf: homerow_mods_left_f {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_F";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <110>;
            flavor = "balanced";
            hold-trigger-key-positions = <21 22 23 24 20 25 11 10 9 8 7 6 32 33 35 34 36 37 41 42 43 40 39 38>;
            hold-trigger-on-release;
        };

        hmrj: homerow_mods_right_j {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_J";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <110>;
            flavor = "balanced";
            hold-trigger-key-positions = <15 16 17 18 0 1 2 3 4 5 19 31 30 29 28 27 26 14 40 39 38 41 42 43>;
            hold-trigger-on-release;
        };

        tpmol: tap_mo_left {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_MO_LEFT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <32 20 6 7 21 33 34 22 8 9 23 35 36 24 10 11 25 37>;
        };

        tpmor: tap_mo_right {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_MO_RIGHT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 14 15 16 17 18 19 26 27 28 29 30 31>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwer {
            bindings = <
&none         &kp Q  &kp W            &kp E                &kp R               &kp T         &kp Y           &kp U                &kp I                 &kp O                 &kp P               &none          &none  &none
&none         &kp A  &hml LEFT_GUI S  &hml LEFT_CONTROL D  &hmlf LEFT_SHIFT F  &kp G         &kp H           &hmrj RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_GUI L      &as COLON SEMI      &none
&kp CAPSLOCK  &kp Z  &kp X            &kp C                &kp V               &kp B         &kp N           &kp M                &as LESS_THAN COMMA   &as GREATER_THAN DOT  &as QUESTION SLASH  &kp RIGHT_ALT
                                      &kp ESC              &tpmor 3 SPACE      &tpmol 5 TAB  &tpmor 2 ENTER  &tpmor 1 BACKSPACE   &tpmor 4 BACKSLASH
            >;

            label = "Qwer";
        };

        Num {
            bindings = <
&kp GRAVE  &none          &kp NUMBER_7  &kp NUMBER_8      &kp NUMBER_9       &kp NUMBER_0      &none  &tap2_macro LESS_THAN MINUS  &tap2_macro MINUS GREATER_THAN  &tap2_macro EQUAL GREATER_THAN  &none  &none          &none  &none
&none      &kp BACKSLASH  &kp NUMBER_4  &kp NUMBER_5      &kp NUMBER_6       &kp MINUS         &none  &kp RIGHT_SHIFT              &kp RIGHT_CONTROL               &kp RIGHT_GUI                   &none  &none
&none      &none          &kp NUMBER_1  &kp NUMBER_2      &kp NUMBER_3       &kp EQUAL         &none  &tap2_macro LESS_THAN EQUAL  &tap2_macro GREATER_THAN EQUAL  &tap2_macro EXCLAMATION EQUAL   &none  &kp RIGHT_ALT
                                        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SINGLE_QUOTE  &none  &none                        &none
            >;

            label = "Num";
        };

        Sym {
            bindings = <
&kp TILDE  &none     &kp AMPERSAND    &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none  &tap2_macro LESS_THAN MINUS  &tap2_macro MINUS GREATER_THAN  &tap2_macro EQUAL GREATER_THAN  &none  &none          &none  &none
&none      &kp PIPE  &kp DOLLAR       &kp PERCENT     &kp CARET             &kp UNDERSCORE         &none  &kp RIGHT_SHIFT              &kp RIGHT_CONTROL               &kp RIGHT_GUI                   &none  &none
&none      &none     &kp EXCLAMATION  &kp AT_SIGN     &kp HASH              &kp PLUS               &none  &tap2_macro LESS_THAN EQUAL  &tap2_macro GREATER_THAN EQUAL  &tap2_macro EXCLAMATION EQUAL   &none  &kp RIGHT_ALT
                                      &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp DOUBLE_QUOTES      &none  &none                        &none
            >;

            label = "Sym";
        };

        Fun {
            bindings = <
&none   &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none                 &none               &kp C_PLAY_PAUSE  &kp F10  &kp F7  &kp F8  &kp F9  &kp C_VOLUME_UP  &none   &none  &none
&trans  &kp F1                &hml LEFT_GUI F2      &hml LEFT_CONTROL F3  &hml LEFT_SHIFT F4  &kp F5            &kp F11  &kp F4  &kp F5  &kp F6  &kp F10          &trans
&trans  &bt BT_CLR            &bt BT_PRV            &bt BT_NXT            &none               &kp F11           &kp F12  &kp F1  &kp F2  &kp F3  &out OUT_TOG     &trans
                                                    &none                 &none               &none             &to 0    &none   &none
            >;

            label = "Fun";
        };

        Nav {
            bindings = <
&none  &none      &none           &kp UP_ARROW    &kp LG(R)        &kp PAGE_UP    &none  &none  &none  &none  &none  &none  &none  &none
&none  &none      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none          &none  &none  &none  &none  &none  &none
&none  &kp LG(Z)  &kp LG(X)       &kp LG(C)       &kp LG(V)        &kp PAGE_DOWN  &none  &none  &none  &none  &none  &none
                                  &kp HOME        &kp END          &none          &none  &none  &none
            >;

            label = "Nav";
        };

        Lay {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &to 4  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &to 0  &to 1  &to 3  &none  &none
                     &none  &none  &none  &none  &none  &none
            >;

            label = "Lay";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
