/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <behaviors/num_word.dtsi>

#define SCROLLER 1
#define MOUSE 4

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

/ {
    macros {
        dongle_bootload_macro: bootload_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
            label = "BOOTLOAD_MACRO";
        };

        mo1layer_macro: mo1layer_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 1>;

            label = "MO1LAYER_LAYER";
            tap-ms = <0>;
        };

        mo2layer_macro: mo2layer_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>;

            label = "MO2LAYER_MACRO";
            wait-ms = <0>;
            tap-ms = <0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <28 29>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <34 35>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <29 30>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <34 33>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <30 31>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <33 32>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };

        to_flash {
            bindings = <&to 4>;
            key-positions = <38 43>;
            timeout-ms = <42>;
            require-prior-idle-ms = <125>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <16 17>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <22 23>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <18 19>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <21 20>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <17 18>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };

        greater_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <21 22>;
            timeout-ms = <42>;
            require-prior-idle-ms = <100>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <95>;
            flavor = "balanced";
            hold-trigger-key-positions = <21 22 23 24 20 25 11 10 9 8 7 6 32 33 35 34 36 37>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <95>;
            flavor = "balanced";
            hold-trigger-key-positions = <15 16 17 18 0 1 2 3 4 5 19 31 30 29 28 27 26 14>;
            hold-trigger-on-release;
        };

        monum: mo_num_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "MO_NUM_LAYER";
            #binding-cells = <0>;
            bindings = <&mo1layer_macro>, <&to 1>;

            tapping-term-ms = <175>;
        };

        mosym: mo_sym_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "MO_SYM_LAYER";
            #binding-cells = <0>;
            bindings = <&mo2layer_macro>, <&to 2>;

            tapping-term-ms = <175>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwer {
            bindings = <
&kp TAB       &kp Q            &kp W            &kp E                           &kp R              &kp T   &kp Y   &kp U               &kp I                 &kp O             &kp P                &none      &none  &none
&kp ESC       &hml LEFT_ALT A  &hml LEFT_GUI S  &hml LEFT_CONTROL D             &hml LEFT_SHIFT F  &kp G   &kp H   &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_GUI L  &hmr RIGHT_ALT SEMI  &kp ENTER
&kp CAPSLOCK  &kp Z            &kp X            &kp C                           &kp V              &kp B   &kp N   &kp M               &kp COMMA             &kp DOT           &as QUESTION SLASH   &to 3
                                                &as DOUBLE_QUOTES SINGLE_QUOTE  &kp SPACE          &monum  &mosym  &kp BACKSPACE       &as PIPE BACKSLASH
            >;

            label = "Qwer";
        };

        Num {
            bindings = <
&kp GRAVE  &none                   &kp LEFT_ARROW          &kp UP_ARROW                    &kp RIGHT_ARROW           &none          &none           &kp HOME                   &kp PAGE_UP                  &kp END                  &kp NUMBER_0             &none      &none  &none
&kp ESC    &hml LEFT_ALT NUMBER_6  &hml LEFT_GUI NUMBER_4  &hml LEFT_CONTROL NUMBER_0      &hml LEFT_SHIFT NUMBER_2  &kp PAGE_UP    &msc SCRL_UP    &hmr RIGHT_SHIFT NUMBER_3  &hmr RIGHT_CONTROL NUMBER_1  &hmr RIGHT_GUI NUMBER_5  &hmr RIGHT_ALT NUMBER_7  &kp ENTER
&none      &none                   &none                   &kp DOWN_ARROW                  &kp NUMBER_8              &kp PAGE_DOWN  &msc SCRL_DOWN  &kp NUMBER_9               &kp PAGE_DOWN                &none                    &none                    &to 0
                                                           &as DOUBLE_QUOTES SINGLE_QUOTE  &trans                    &to 0          &to 0           &trans                     &as PIPE BACKSLASH
            >;

            label = "Num";
        };

        Sym {
            bindings = <
&kp TILDE  &none                &kp LEFT_ARROW        &kp UP_ARROW                         &kp RIGHT_ARROW          &none          &kp CARET       &kp AMPERSAND    &kp STAR            &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none      &none  &none
&kp ESC    &hml LEFT_ALT CARET  &hml LEFT_GUI DOLLAR  &hml LEFT_CONTROL RIGHT_PARENTHESIS  &hml LEFT_SHIFT AT_SIGN  &kp PAGE_UP    &msc SCRL_UP    &kp RIGHT_SHIFT  &kp RIGHT_CONTROL   &kp RIGHT_GUI         &kp RIGHT_ALT          &kp ENTER
&none      &none                &none                 &kp DOWN_ARROW                       &kp STAR                 &kp PAGE_DOWN  &msc SCRL_DOWN  &none            &none               &none                 &none                  &to 0
                                                      &as DOUBLE_QUOTES SINGLE_QUOTE       &trans                   &to 0          &to 0           &trans           &as PIPE BACKSLASH
            >;

            label = "Sym";
        };

        Fun {
            bindings = <
&none    &kp F1            &kp F2            &kp F3                &kp F4              &none  &kp KP_DOT       &kp KP_N7               &kp KP_N8                 &kp KP_N9             &kp KP_PLUS                 &kp KP_MINUS   &none  &none
&kp ESC  &hml LEFT_ALT F5  &hml LEFT_GUI F6  &hml LEFT_CONTROL F7  &hml LEFT_SHIFT F8  &none  &none            &hmr RIGHT_SHIFT KP_N4  &hmr RIGHT_CONTROL KP_N5  &hmr RIGHT_GUI KP_N6  &hmr RIGHT_ALT KP_MULTIPLY  &kp KP_DIVIDE
&none    &kp F9            &kp F10           &kp F11               &kp F12             &none  &kp KP_NUMBER_0  &kp KP_N1               &kp KP_N2                 &kp KP_N3             &kp KP_EQUAL                &to 0
                                             &none                 &trans              &to 0  &to 0            &trans                  &none
            >;

            label = "Fun";
        };

        Boot {
            bindings = <
&dongle_bootload_macro  &none  &none             &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &out OUT_TOG  &none  &none
&none                   &none  &kp C_MUTE        &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &none  &none         &bt BT_CLR    &bt BT_PRV    &bt BT_NXT    &none         &none
&none                   &none  &kp C_PLAY_PAUSE  &kp C_PREV            &kp C_NEXT            &none  &none         &none         &none         &none         &none         &to 0
                                                 &none                 &trans                &to 0  &to 0         &trans        &none
            >;

            label = "Boot";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
